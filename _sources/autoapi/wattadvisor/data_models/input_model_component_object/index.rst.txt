wattadvisor.data_models.input_model_component_object
====================================================

.. py:module:: wattadvisor.data_models.input_model_component_object

.. autoapi-nested-parse::

   Copyright (c) 2007, Eclipse Foundation, Inc. and its licensors. All rights reserved.
   Use of this source code is governed by a BSD-style license that can be found in the LICENSE file.



Classes
-------

.. autoapisummary::

   wattadvisor.data_models.input_model_component_object.PowerUnitComponent
   wattadvisor.data_models.input_model_component_object.AreaUnitComponent
   wattadvisor.data_models.input_model_component_object.StorageComponent
   wattadvisor.data_models.input_model_component_object.InputModelComponentPower
   wattadvisor.data_models.input_model_component_object.InputModelComponentArea
   wattadvisor.data_models.input_model_component_object.InputModelComponentStorage


Module Contents
---------------

.. py:class:: PowerUnitComponent

   Bases: :py:obj:`enum.Enum`


   Energy components used in the input request which are defined by a 'power' field.




   .. py:attribute:: PHOTOVOLTAIK_ROOF
      :value: 'PHOTOVOLTAIK_ROOF'



   .. py:attribute:: PHOTOVOLTAIK_FREE_FIELD
      :value: 'PHOTOVOLTAIK_FREE_FIELD'



   .. py:attribute:: WIND_POWER
      :value: 'WIND_POWER'



   .. py:attribute:: COMBINED_HEAT_POWER
      :value: 'COMBINED_HEAT_POWER'



   .. py:attribute:: HEAT_PUMP_AIR
      :value: 'HEAT_PUMP_AIR'



   .. py:attribute:: HEAT_PUMP_GROUND
      :value: 'HEAT_PUMP_GROUND'



   .. py:attribute:: GAS_BOILER
      :value: 'GAS_BOILER'



   .. py:method:: get_component_class()

      Returns the corresponding optimization model component class of the component.





.. py:class:: AreaUnitComponent

   Bases: :py:obj:`enum.Enum`


   Generic enumeration.

   Derive from this class to define new enumerations.


   .. py:attribute:: SOLARTHERMAL_ENERGY
      :value: 'SOLARTHERMAL_ENERGY'



   .. py:method:: get_component_class()

      Returns the corresponding optimization model component class of the component.





   .. py:method:: get_energy_type() -> EnergyType

      Returns the corresponding `EnergyType` of the component.





.. py:class:: StorageComponent

   Bases: :py:obj:`enum.Enum`


   Energy components used in the input request which are defined by a 'capacity' field.




   .. py:attribute:: ELECTRICAL_ENERGY_STORAGE
      :value: 'ELECTRICAL_ENERGY_STORAGE'



   .. py:attribute:: THERMAL_ENERGY_STORAGE
      :value: 'THERMAL_ENERGY_STORAGE'



   .. py:method:: get_component_class()

      Returns the corresponding optimization model component class of the component.





   .. py:method:: get_energy_type() -> EnergyType

      Returns the corresponding `EnergyType` of the component.





.. py:class:: InputModelComponentPower

   Bases: :py:obj:`pydantic.BaseModel`


   .. py:attribute:: component_type
      :type:  wattadvisor.data_models.enums.PowerUnitComponent


   .. py:attribute:: installed_power
      :type:  float


   .. py:attribute:: potential_power
      :type:  Optional[float]


   .. py:attribute:: capex
      :type:  Optional[float]


   .. py:attribute:: opex
      :type:  Optional[float]


   .. py:attribute:: lifespan
      :type:  Optional[float]


.. py:class:: InputModelComponentArea

   Bases: :py:obj:`pydantic.BaseModel`


   .. py:attribute:: component_type
      :type:  wattadvisor.data_models.enums.AreaUnitComponent


   .. py:attribute:: installed_area
      :type:  float


   .. py:attribute:: potential_area
      :type:  Optional[float]


   .. py:attribute:: capex
      :type:  Optional[float]


   .. py:attribute:: opex
      :type:  Optional[float]


   .. py:attribute:: lifespan
      :type:  Optional[float]


.. py:class:: InputModelComponentStorage

   Bases: :py:obj:`pydantic.BaseModel`


   .. py:attribute:: component_type
      :type:  wattadvisor.data_models.enums.StorageComponent


   .. py:attribute:: installed_power
      :type:  Optional[float]


   .. py:attribute:: potential_power
      :type:  Optional[float]


   .. py:attribute:: installed_capacity
      :type:  float


   .. py:attribute:: potential_capacity
      :type:  Optional[float]


   .. py:attribute:: capex_capacity
      :type:  Optional[float]


   .. py:attribute:: capex_power
      :type:  Optional[float]


   .. py:attribute:: opex
      :type:  Optional[float]


   .. py:attribute:: lifespan
      :type:  Optional[float]


